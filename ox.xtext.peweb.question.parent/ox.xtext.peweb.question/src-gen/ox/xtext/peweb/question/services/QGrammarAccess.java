/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package ox.xtext.peweb.question.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QGrammarAccess extends AbstractGrammarElementFinder {
	
	public class QuestionnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.Questionnaire");
		private final Assignment cSectionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSectionsSectionParserRuleCall_0 = (RuleCall)cSectionsAssignment.eContents().get(0);
		
		//Questionnaire:
		//	sections+=Section*;
		@Override public ParserRule getRule() { return rule; }
		
		//sections+=Section*
		public Assignment getSectionsAssignment() { return cSectionsAssignment; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_0() { return cSectionsSectionParserRuleCall_0; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSectionContentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSectionContentsSectionContentsParserRuleCall_3_0 = (RuleCall)cSectionContentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNextSectionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNextSectionNextSectionParserRuleCall_5_0 = (RuleCall)cNextSectionAssignment_5.eContents().get(0);
		
		//Section:
		//	'Section' name=ID '{'
		//	sectionContents+=SectionContents+
		//	'}' nextSection=NextSection?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Section' name=ID '{' sectionContents+=SectionContents+ '}' nextSection=NextSection?
		public Group getGroup() { return cGroup; }
		
		//'Section'
		public Keyword getSectionKeyword_0() { return cSectionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//sectionContents+=SectionContents+
		public Assignment getSectionContentsAssignment_3() { return cSectionContentsAssignment_3; }
		
		//SectionContents
		public RuleCall getSectionContentsSectionContentsParserRuleCall_3_0() { return cSectionContentsSectionContentsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//nextSection=NextSection?
		public Assignment getNextSectionAssignment_5() { return cNextSectionAssignment_5; }
		
		//NextSection
		public RuleCall getNextSectionNextSectionParserRuleCall_5_0() { return cNextSectionNextSectionParserRuleCall_5_0; }
	}
	public class SectionContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.SectionContents");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTitleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDescriptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SectionContents:
		//	Question | Title | Description;
		@Override public ParserRule getRule() { return rule; }
		
		//Question | Title | Description
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Question
		public RuleCall getQuestionParserRuleCall_0() { return cQuestionParserRuleCall_0; }
		
		//Title
		public RuleCall getTitleParserRuleCall_1() { return cTitleParserRuleCall_1; }
		
		//Description
		public RuleCall getDescriptionParserRuleCall_2() { return cDescriptionParserRuleCall_2; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		
		//Title:
		//	'Title' title=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Title' title=STRING
		public Group getGroup() { return cGroup; }
		
		//'Title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//Description:
		//	'Description' description=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Description' description=STRING
		public Group getGroup() { return cGroup; }
		
		//'Description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultipleChoiceQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Question:
		//	MultipleChoiceQuestion | TextQuestion;
		@Override public ParserRule getRule() { return rule; }
		
		//MultipleChoiceQuestion | TextQuestion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MultipleChoiceQuestion
		public RuleCall getMultipleChoiceQuestionParserRuleCall_0() { return cMultipleChoiceQuestionParserRuleCall_0; }
		
		//TextQuestion
		public RuleCall getTextQuestionParserRuleCall_1() { return cTextQuestionParserRuleCall_1; }
	}
	public class MultipleChoiceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.MultipleChoiceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultipleChoiceQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_1_0 = (RuleCall)cQuestionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnswersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnswersMultipleChoiceAnswerParserRuleCall_3_0 = (RuleCall)cAnswersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MultipleChoiceQuestion:
		//	'MultipleChoiceQuestion' question=STRING '{'
		//	answers+=MultipleChoiceAnswer*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MultipleChoiceQuestion' question=STRING '{' answers+=MultipleChoiceAnswer* '}'
		public Group getGroup() { return cGroup; }
		
		//'MultipleChoiceQuestion'
		public Keyword getMultipleChoiceQuestionKeyword_0() { return cMultipleChoiceQuestionKeyword_0; }
		
		//question=STRING
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }
		
		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_1_0() { return cQuestionSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//answers+=MultipleChoiceAnswer*
		public Assignment getAnswersAssignment_3() { return cAnswersAssignment_3; }
		
		//MultipleChoiceAnswer
		public RuleCall getAnswersMultipleChoiceAnswerParserRuleCall_3_0() { return cAnswersMultipleChoiceAnswerParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MultipleChoiceAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.MultipleChoiceAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnswerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnswerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_1_0 = (RuleCall)cAnswerAssignment_1.eContents().get(0);
		private final Assignment cGotoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGotoSectionReferenceParserRuleCall_2_0 = (RuleCall)cGotoAssignment_2.eContents().get(0);
		
		//MultipleChoiceAnswer:
		//	'Answer' answer=STRING goto=SectionReference?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Answer' answer=STRING goto=SectionReference?
		public Group getGroup() { return cGroup; }
		
		//'Answer'
		public Keyword getAnswerKeyword_0() { return cAnswerKeyword_0; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_1() { return cAnswerAssignment_1; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_1_0() { return cAnswerSTRINGTerminalRuleCall_1_0; }
		
		//goto=SectionReference?
		public Assignment getGotoAssignment_2() { return cGotoAssignment_2; }
		
		//SectionReference
		public RuleCall getGotoSectionReferenceParserRuleCall_2_0() { return cGotoSectionReferenceParserRuleCall_2_0; }
	}
	public class TextQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.TextQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_1_0 = (RuleCall)cQuestionAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//TextQuestion:
		//	'TextQuestion' question=STRING description=STRING? ('{'
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'TextQuestion' question=STRING description=STRING? ('{' '}')?
		public Group getGroup() { return cGroup; }
		
		//'TextQuestion'
		public Keyword getTextQuestionKeyword_0() { return cTextQuestionKeyword_0; }
		
		//question=STRING
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }
		
		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_1_0() { return cQuestionSTRINGTerminalRuleCall_1_0; }
		
		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//('{' '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1() { return cRightCurlyBracketKeyword_3_1; }
	}
	public class NextSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.NextSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSectionReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEndOfQuestionnaireAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cEndOfQuestionnaireParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NextSection:
		//	SectionReference | {EndOfQuestionnaire} EndOfQuestionnaire;
		@Override public ParserRule getRule() { return rule; }
		
		//SectionReference | {EndOfQuestionnaire} EndOfQuestionnaire
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SectionReference
		public RuleCall getSectionReferenceParserRuleCall_0() { return cSectionReferenceParserRuleCall_0; }
		
		//{EndOfQuestionnaire} EndOfQuestionnaire
		public Group getGroup_1() { return cGroup_1; }
		
		//{EndOfQuestionnaire}
		public Action getEndOfQuestionnaireAction_1_0() { return cEndOfQuestionnaireAction_1_0; }
		
		//EndOfQuestionnaire
		public RuleCall getEndOfQuestionnaireParserRuleCall_1_1() { return cEndOfQuestionnaireParserRuleCall_1_1; }
	}
	public class SectionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.SectionReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSectionSectionCrossReference_1_0 = (CrossReference)cSectionAssignment_1.eContents().get(0);
		private final RuleCall cSectionSectionIDTerminalRuleCall_1_0_1 = (RuleCall)cSectionSectionCrossReference_1_0.eContents().get(1);
		
		//SectionReference:
		//	'goto' section=[Section];
		@Override public ParserRule getRule() { return rule; }
		
		//'goto' section=[Section]
		public Group getGroup() { return cGroup; }
		
		//'goto'
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//section=[Section]
		public Assignment getSectionAssignment_1() { return cSectionAssignment_1; }
		
		//[Section]
		public CrossReference getSectionSectionCrossReference_1_0() { return cSectionSectionCrossReference_1_0; }
		
		//ID
		public RuleCall getSectionSectionIDTerminalRuleCall_1_0_1() { return cSectionSectionIDTerminalRuleCall_1_0_1; }
	}
	public class EndOfQuestionnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.question.Q.EndOfQuestionnaire");
		private final Keyword cEndKeyword = (Keyword)rule.eContents().get(1);
		
		//EndOfQuestionnaire:
		//	'End';
		@Override public ParserRule getRule() { return rule; }
		
		//'End'
		public Keyword getEndKeyword() { return cEndKeyword; }
	}
	
	
	private final QuestionnaireElements pQuestionnaire;
	private final SectionElements pSection;
	private final SectionContentsElements pSectionContents;
	private final TitleElements pTitle;
	private final DescriptionElements pDescription;
	private final QuestionElements pQuestion;
	private final MultipleChoiceQuestionElements pMultipleChoiceQuestion;
	private final MultipleChoiceAnswerElements pMultipleChoiceAnswer;
	private final TextQuestionElements pTextQuestion;
	private final NextSectionElements pNextSection;
	private final SectionReferenceElements pSectionReference;
	private final EndOfQuestionnaireElements pEndOfQuestionnaire;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQuestionnaire = new QuestionnaireElements();
		this.pSection = new SectionElements();
		this.pSectionContents = new SectionContentsElements();
		this.pTitle = new TitleElements();
		this.pDescription = new DescriptionElements();
		this.pQuestion = new QuestionElements();
		this.pMultipleChoiceQuestion = new MultipleChoiceQuestionElements();
		this.pMultipleChoiceAnswer = new MultipleChoiceAnswerElements();
		this.pTextQuestion = new TextQuestionElements();
		this.pNextSection = new NextSectionElements();
		this.pSectionReference = new SectionReferenceElements();
		this.pEndOfQuestionnaire = new EndOfQuestionnaireElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ox.xtext.peweb.question.Q".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Questionnaire:
	//	sections+=Section*;
	public QuestionnaireElements getQuestionnaireAccess() {
		return pQuestionnaire;
	}
	
	public ParserRule getQuestionnaireRule() {
		return getQuestionnaireAccess().getRule();
	}
	
	//Section:
	//	'Section' name=ID '{'
	//	sectionContents+=SectionContents+
	//	'}' nextSection=NextSection?;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//SectionContents:
	//	Question | Title | Description;
	public SectionContentsElements getSectionContentsAccess() {
		return pSectionContents;
	}
	
	public ParserRule getSectionContentsRule() {
		return getSectionContentsAccess().getRule();
	}
	
	//Title:
	//	'Title' title=STRING;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//Description:
	//	'Description' description=STRING;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//Question:
	//	MultipleChoiceQuestion | TextQuestion;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//MultipleChoiceQuestion:
	//	'MultipleChoiceQuestion' question=STRING '{'
	//	answers+=MultipleChoiceAnswer*
	//	'}';
	public MultipleChoiceQuestionElements getMultipleChoiceQuestionAccess() {
		return pMultipleChoiceQuestion;
	}
	
	public ParserRule getMultipleChoiceQuestionRule() {
		return getMultipleChoiceQuestionAccess().getRule();
	}
	
	//MultipleChoiceAnswer:
	//	'Answer' answer=STRING goto=SectionReference?;
	public MultipleChoiceAnswerElements getMultipleChoiceAnswerAccess() {
		return pMultipleChoiceAnswer;
	}
	
	public ParserRule getMultipleChoiceAnswerRule() {
		return getMultipleChoiceAnswerAccess().getRule();
	}
	
	//TextQuestion:
	//	'TextQuestion' question=STRING description=STRING? ('{'
	//	'}')?;
	public TextQuestionElements getTextQuestionAccess() {
		return pTextQuestion;
	}
	
	public ParserRule getTextQuestionRule() {
		return getTextQuestionAccess().getRule();
	}
	
	//NextSection:
	//	SectionReference | {EndOfQuestionnaire} EndOfQuestionnaire;
	public NextSectionElements getNextSectionAccess() {
		return pNextSection;
	}
	
	public ParserRule getNextSectionRule() {
		return getNextSectionAccess().getRule();
	}
	
	//SectionReference:
	//	'goto' section=[Section];
	public SectionReferenceElements getSectionReferenceAccess() {
		return pSectionReference;
	}
	
	public ParserRule getSectionReferenceRule() {
		return getSectionReferenceAccess().getRule();
	}
	
	//EndOfQuestionnaire:
	//	'End';
	public EndOfQuestionnaireElements getEndOfQuestionnaireAccess() {
		return pEndOfQuestionnaire;
	}
	
	public ParserRule getEndOfQuestionnaireRule() {
		return getEndOfQuestionnaireAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
