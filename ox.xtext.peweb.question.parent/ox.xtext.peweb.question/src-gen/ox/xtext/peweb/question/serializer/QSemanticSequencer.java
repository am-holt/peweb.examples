/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package ox.xtext.peweb.question.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import ox.xtext.peweb.question.q.Description;
import ox.xtext.peweb.question.q.EndOfQuestionnaire;
import ox.xtext.peweb.question.q.MultipleChoiceAnswer;
import ox.xtext.peweb.question.q.MultipleChoiceQuestion;
import ox.xtext.peweb.question.q.QPackage;
import ox.xtext.peweb.question.q.Questionnaire;
import ox.xtext.peweb.question.q.Section;
import ox.xtext.peweb.question.q.SectionReference;
import ox.xtext.peweb.question.q.TextQuestion;
import ox.xtext.peweb.question.q.Title;
import ox.xtext.peweb.question.services.QGrammarAccess;

@SuppressWarnings("all")
public class QSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case QPackage.END_OF_QUESTIONNAIRE:
				sequence_NextSection(context, (EndOfQuestionnaire) semanticObject); 
				return; 
			case QPackage.MULTIPLE_CHOICE_ANSWER:
				sequence_MultipleChoiceAnswer(context, (MultipleChoiceAnswer) semanticObject); 
				return; 
			case QPackage.MULTIPLE_CHOICE_QUESTION:
				sequence_MultipleChoiceQuestion(context, (MultipleChoiceQuestion) semanticObject); 
				return; 
			case QPackage.QUESTIONNAIRE:
				sequence_Questionnaire(context, (Questionnaire) semanticObject); 
				return; 
			case QPackage.SECTION:
				sequence_Section(context, (Section) semanticObject); 
				return; 
			case QPackage.SECTION_REFERENCE:
				sequence_SectionReference(context, (SectionReference) semanticObject); 
				return; 
			case QPackage.TEXT_QUESTION:
				sequence_TextQuestion(context, (TextQuestion) semanticObject); 
				return; 
			case QPackage.TITLE:
				sequence_Title(context, (Title) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SectionContents returns Description
	 *     Description returns Description
	 *
	 * Constraint:
	 *     description=STRING
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QPackage.Literals.DESCRIPTION__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QPackage.Literals.DESCRIPTION__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getDescriptionSTRINGTerminalRuleCall_1_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultipleChoiceAnswer returns MultipleChoiceAnswer
	 *
	 * Constraint:
	 *     (answer=STRING goto=SectionReference?)
	 */
	protected void sequence_MultipleChoiceAnswer(ISerializationContext context, MultipleChoiceAnswer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SectionContents returns MultipleChoiceQuestion
	 *     Question returns MultipleChoiceQuestion
	 *     MultipleChoiceQuestion returns MultipleChoiceQuestion
	 *
	 * Constraint:
	 *     (question=STRING answers+=MultipleChoiceAnswer*)
	 */
	protected void sequence_MultipleChoiceQuestion(ISerializationContext context, MultipleChoiceQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NextSection returns EndOfQuestionnaire
	 *
	 * Constraint:
	 *     {EndOfQuestionnaire}
	 */
	protected void sequence_NextSection(ISerializationContext context, EndOfQuestionnaire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Questionnaire returns Questionnaire
	 *
	 * Constraint:
	 *     sections+=Section+
	 */
	protected void sequence_Questionnaire(ISerializationContext context, Questionnaire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NextSection returns SectionReference
	 *     SectionReference returns SectionReference
	 *
	 * Constraint:
	 *     section=[Section|ID]
	 */
	protected void sequence_SectionReference(ISerializationContext context, SectionReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QPackage.Literals.SECTION_REFERENCE__SECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QPackage.Literals.SECTION_REFERENCE__SECTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSectionReferenceAccess().getSectionSectionIDTerminalRuleCall_1_0_1(), semanticObject.eGet(QPackage.Literals.SECTION_REFERENCE__SECTION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Section returns Section
	 *
	 * Constraint:
	 *     (name=ID sectionContents+=SectionContents+ nextSection=NextSection?)
	 */
	protected void sequence_Section(ISerializationContext context, Section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SectionContents returns TextQuestion
	 *     Question returns TextQuestion
	 *     TextQuestion returns TextQuestion
	 *
	 * Constraint:
	 *     (question=STRING description=STRING?)
	 */
	protected void sequence_TextQuestion(ISerializationContext context, TextQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SectionContents returns Title
	 *     Title returns Title
	 *
	 * Constraint:
	 *     title=STRING
	 */
	protected void sequence_Title(ISerializationContext context, Title semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QPackage.Literals.TITLE__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QPackage.Literals.TITLE__TITLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTitleAccess().getTitleSTRINGTerminalRuleCall_1_0(), semanticObject.getTitle());
		feeder.finish();
	}
	
	
}
