/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package ox.xtext.peweb.question.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import ox.xtext.peweb.question.ide.contentassist.antlr.internal.InternalQParser;
import ox.xtext.peweb.question.services.QGrammarAccess;

public class QParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(QGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, QGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSectionContentsAccess().getAlternatives(), "rule__SectionContents__Alternatives");
			builder.put(grammarAccess.getQuestionAccess().getAlternatives(), "rule__Question__Alternatives");
			builder.put(grammarAccess.getNextSectionAccess().getAlternatives(), "rule__NextSection__Alternatives");
			builder.put(grammarAccess.getSectionAccess().getGroup(), "rule__Section__Group__0");
			builder.put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
			builder.put(grammarAccess.getDescriptionAccess().getGroup(), "rule__Description__Group__0");
			builder.put(grammarAccess.getMultipleChoiceQuestionAccess().getGroup(), "rule__MultipleChoiceQuestion__Group__0");
			builder.put(grammarAccess.getMultipleChoiceAnswerAccess().getGroup(), "rule__MultipleChoiceAnswer__Group__0");
			builder.put(grammarAccess.getTextQuestionAccess().getGroup(), "rule__TextQuestion__Group__0");
			builder.put(grammarAccess.getTextQuestionAccess().getGroup_3(), "rule__TextQuestion__Group_3__0");
			builder.put(grammarAccess.getNextSectionAccess().getGroup_1(), "rule__NextSection__Group_1__0");
			builder.put(grammarAccess.getSectionReferenceAccess().getGroup(), "rule__SectionReference__Group__0");
			builder.put(grammarAccess.getQuestionnaireAccess().getSectionsAssignment(), "rule__Questionnaire__SectionsAssignment");
			builder.put(grammarAccess.getSectionAccess().getNameAssignment_1(), "rule__Section__NameAssignment_1");
			builder.put(grammarAccess.getSectionAccess().getSectionContentsAssignment_3(), "rule__Section__SectionContentsAssignment_3");
			builder.put(grammarAccess.getSectionAccess().getNextSectionAssignment_5(), "rule__Section__NextSectionAssignment_5");
			builder.put(grammarAccess.getTitleAccess().getTitleAssignment_1(), "rule__Title__TitleAssignment_1");
			builder.put(grammarAccess.getDescriptionAccess().getDescriptionAssignment_1(), "rule__Description__DescriptionAssignment_1");
			builder.put(grammarAccess.getMultipleChoiceQuestionAccess().getQuestionAssignment_1(), "rule__MultipleChoiceQuestion__QuestionAssignment_1");
			builder.put(grammarAccess.getMultipleChoiceQuestionAccess().getAnswersAssignment_3(), "rule__MultipleChoiceQuestion__AnswersAssignment_3");
			builder.put(grammarAccess.getMultipleChoiceAnswerAccess().getAnswerAssignment_1(), "rule__MultipleChoiceAnswer__AnswerAssignment_1");
			builder.put(grammarAccess.getMultipleChoiceAnswerAccess().getGotoAssignment_2(), "rule__MultipleChoiceAnswer__GotoAssignment_2");
			builder.put(grammarAccess.getTextQuestionAccess().getQuestionAssignment_1(), "rule__TextQuestion__QuestionAssignment_1");
			builder.put(grammarAccess.getTextQuestionAccess().getDescriptionAssignment_2(), "rule__TextQuestion__DescriptionAssignment_2");
			builder.put(grammarAccess.getSectionReferenceAccess().getSectionAssignment_1(), "rule__SectionReference__SectionAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private QGrammarAccess grammarAccess;

	@Override
	protected InternalQParser createParser() {
		InternalQParser result = new InternalQParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
