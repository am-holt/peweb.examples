/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package ox.xtext.peweb.arithmetic.arithmetic.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import ox.xtext.peweb.arithmetic.arithmetic.ArithmeticPackage;
import ox.xtext.peweb.arithmetic.arithmetic.DeclaredParameter;
import ox.xtext.peweb.arithmetic.arithmetic.Expression;
import ox.xtext.peweb.arithmetic.arithmetic.SumExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sum Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ox.xtext.peweb.arithmetic.arithmetic.impl.SumExpressionImpl#getIndexVariable <em>Index Variable</em>}</li>
 *   <li>{@link ox.xtext.peweb.arithmetic.arithmetic.impl.SumExpressionImpl#getLower <em>Lower</em>}</li>
 *   <li>{@link ox.xtext.peweb.arithmetic.arithmetic.impl.SumExpressionImpl#getUpper <em>Upper</em>}</li>
 *   <li>{@link ox.xtext.peweb.arithmetic.arithmetic.impl.SumExpressionImpl#getExpr <em>Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SumExpressionImpl extends ExpressionImpl implements SumExpression
{
  /**
   * The cached value of the '{@link #getIndexVariable() <em>Index Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndexVariable()
   * @generated
   * @ordered
   */
  protected DeclaredParameter indexVariable;

  /**
   * The default value of the '{@link #getLower() <em>Lower</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLower()
   * @generated
   * @ordered
   */
  protected static final int LOWER_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getLower() <em>Lower</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLower()
   * @generated
   * @ordered
   */
  protected int lower = LOWER_EDEFAULT;

  /**
   * The default value of the '{@link #getUpper() <em>Upper</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpper()
   * @generated
   * @ordered
   */
  protected static final int UPPER_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getUpper() <em>Upper</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpper()
   * @generated
   * @ordered
   */
  protected int upper = UPPER_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected Expression expr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SumExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArithmeticPackage.Literals.SUM_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclaredParameter getIndexVariable()
  {
    return indexVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIndexVariable(DeclaredParameter newIndexVariable, NotificationChain msgs)
  {
    DeclaredParameter oldIndexVariable = indexVariable;
    indexVariable = newIndexVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArithmeticPackage.SUM_EXPRESSION__INDEX_VARIABLE, oldIndexVariable, newIndexVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIndexVariable(DeclaredParameter newIndexVariable)
  {
    if (newIndexVariable != indexVariable)
    {
      NotificationChain msgs = null;
      if (indexVariable != null)
        msgs = ((InternalEObject)indexVariable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArithmeticPackage.SUM_EXPRESSION__INDEX_VARIABLE, null, msgs);
      if (newIndexVariable != null)
        msgs = ((InternalEObject)newIndexVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArithmeticPackage.SUM_EXPRESSION__INDEX_VARIABLE, null, msgs);
      msgs = basicSetIndexVariable(newIndexVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArithmeticPackage.SUM_EXPRESSION__INDEX_VARIABLE, newIndexVariable, newIndexVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getLower()
  {
    return lower;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLower(int newLower)
  {
    int oldLower = lower;
    lower = newLower;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArithmeticPackage.SUM_EXPRESSION__LOWER, oldLower, lower));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getUpper()
  {
    return upper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUpper(int newUpper)
  {
    int oldUpper = upper;
    upper = newUpper;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArithmeticPackage.SUM_EXPRESSION__UPPER, oldUpper, upper));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(Expression newExpr, NotificationChain msgs)
  {
    Expression oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArithmeticPackage.SUM_EXPRESSION__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr(Expression newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArithmeticPackage.SUM_EXPRESSION__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArithmeticPackage.SUM_EXPRESSION__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArithmeticPackage.SUM_EXPRESSION__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArithmeticPackage.SUM_EXPRESSION__INDEX_VARIABLE:
        return basicSetIndexVariable(null, msgs);
      case ArithmeticPackage.SUM_EXPRESSION__EXPR:
        return basicSetExpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArithmeticPackage.SUM_EXPRESSION__INDEX_VARIABLE:
        return getIndexVariable();
      case ArithmeticPackage.SUM_EXPRESSION__LOWER:
        return getLower();
      case ArithmeticPackage.SUM_EXPRESSION__UPPER:
        return getUpper();
      case ArithmeticPackage.SUM_EXPRESSION__EXPR:
        return getExpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArithmeticPackage.SUM_EXPRESSION__INDEX_VARIABLE:
        setIndexVariable((DeclaredParameter)newValue);
        return;
      case ArithmeticPackage.SUM_EXPRESSION__LOWER:
        setLower((Integer)newValue);
        return;
      case ArithmeticPackage.SUM_EXPRESSION__UPPER:
        setUpper((Integer)newValue);
        return;
      case ArithmeticPackage.SUM_EXPRESSION__EXPR:
        setExpr((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArithmeticPackage.SUM_EXPRESSION__INDEX_VARIABLE:
        setIndexVariable((DeclaredParameter)null);
        return;
      case ArithmeticPackage.SUM_EXPRESSION__LOWER:
        setLower(LOWER_EDEFAULT);
        return;
      case ArithmeticPackage.SUM_EXPRESSION__UPPER:
        setUpper(UPPER_EDEFAULT);
        return;
      case ArithmeticPackage.SUM_EXPRESSION__EXPR:
        setExpr((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArithmeticPackage.SUM_EXPRESSION__INDEX_VARIABLE:
        return indexVariable != null;
      case ArithmeticPackage.SUM_EXPRESSION__LOWER:
        return lower != LOWER_EDEFAULT;
      case ArithmeticPackage.SUM_EXPRESSION__UPPER:
        return upper != UPPER_EDEFAULT;
      case ArithmeticPackage.SUM_EXPRESSION__EXPR:
        return expr != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (lower: ");
    result.append(lower);
    result.append(", upper: ");
    result.append(upper);
    result.append(')');
    return result.toString();
  }

} //SumExpressionImpl
