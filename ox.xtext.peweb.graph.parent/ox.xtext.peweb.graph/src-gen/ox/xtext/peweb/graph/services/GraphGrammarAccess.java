/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package ox.xtext.peweb.graph.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GraphGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Keyword cBEGINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtsStatementParserRuleCall_3_0 = (RuleCall)cStmtsAssignment_3.eContents().get(0);
		private final Keyword cENDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program:
		//	{Program} declarations+=Declaration* 'BEGIN' stmts+=Statement* 'END';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} declarations+=Declaration* 'BEGIN' stmts+=Statement* 'END'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0() { return cDeclarationsDeclarationParserRuleCall_1_0; }
		
		//'BEGIN'
		public Keyword getBEGINKeyword_2() { return cBEGINKeyword_2; }
		
		//stmts+=Statement*
		public Assignment getStmtsAssignment_3() { return cStmtsAssignment_3; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_3_0() { return cStmtsStatementParserRuleCall_3_0; }
		
		//'END'
		public Keyword getENDKeyword_4() { return cENDKeyword_4; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final Keyword cTypeStringKeyword_3_0_0 = (Keyword)cTypeAlternatives_3_0.eContents().get(0);
		private final Keyword cTypeIntegerKeyword_3_0_1 = (Keyword)cTypeAlternatives_3_0.eContents().get(1);
		private final Keyword cTypeBooleanKeyword_3_0_2 = (Keyword)cTypeAlternatives_3_0.eContents().get(2);
		private final Keyword cTypeGraphKeyword_3_0_3 = (Keyword)cTypeAlternatives_3_0.eContents().get(3);
		private final Keyword cTypeParticleKeyword_3_0_4 = (Keyword)cTypeAlternatives_3_0.eContents().get(4);
		
		//Declaration:
		//	'VAR' name=ID ':' type=('String' | 'Integer' | 'Boolean' | 'Graph' | 'Particle');
		@Override public ParserRule getRule() { return rule; }
		
		//'VAR' name=ID ':' type=('String' | 'Integer' | 'Boolean' | 'Graph' | 'Particle')
		public Group getGroup() { return cGroup; }
		
		//'VAR'
		public Keyword getVARKeyword_0() { return cVARKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=('String' | 'Integer' | 'Boolean' | 'Graph' | 'Particle')
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//('String' | 'Integer' | 'Boolean' | 'Graph' | 'Particle')
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }
		
		//'String'
		public Keyword getTypeStringKeyword_3_0_0() { return cTypeStringKeyword_3_0_0; }
		
		//'Integer'
		public Keyword getTypeIntegerKeyword_3_0_1() { return cTypeIntegerKeyword_3_0_1; }
		
		//'Boolean'
		public Keyword getTypeBooleanKeyword_3_0_2() { return cTypeBooleanKeyword_3_0_2; }
		
		//'Graph'
		public Keyword getTypeGraphKeyword_3_0_3() { return cTypeGraphKeyword_3_0_3; }
		
		//'Particle'
		public Keyword getTypeParticleKeyword_3_0_4() { return cTypeParticleKeyword_3_0_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAssignStmtParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cPrintStmtParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cWhileStmtParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cMoveStmtParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//	(AssignStmt | PrintStmt | IfStmt | WhileStmt | MoveStmt) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(AssignStmt | PrintStmt | IfStmt | WhileStmt | MoveStmt) ';'
		public Group getGroup() { return cGroup; }
		
		//AssignStmt | PrintStmt | IfStmt | WhileStmt | MoveStmt
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//AssignStmt
		public RuleCall getAssignStmtParserRuleCall_0_0() { return cAssignStmtParserRuleCall_0_0; }
		
		//PrintStmt
		public RuleCall getPrintStmtParserRuleCall_0_1() { return cPrintStmtParserRuleCall_0_1; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_0_2() { return cIfStmtParserRuleCall_0_2; }
		
		//WhileStmt
		public RuleCall getWhileStmtParserRuleCall_0_3() { return cWhileStmtParserRuleCall_0_3; }
		
		//MoveStmt
		public RuleCall getMoveStmtParserRuleCall_0_4() { return cMoveStmtParserRuleCall_0_4; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class AssignStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.AssignStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarDeclarationCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVarDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AssignStmt:
		//	var=[Declaration] ':=' expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//var=[Declaration] ':=' expr=Expr
		public Group getGroup() { return cGroup; }
		
		//var=[Declaration]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[Declaration]
		public CrossReference getVarDeclarationCrossReference_0_0() { return cVarDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getVarDeclarationIDTerminalRuleCall_0_0_1() { return cVarDeclarationIDTerminalRuleCall_0_0_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }
	}
	public class PrintStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.PrintStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRINTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//PrintStmt:
		//	'PRINT' expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//'PRINT' expr=Expr
		public Group getGroup() { return cGroup; }
		
		//'PRINT'
		public Keyword getPRINTKeyword_0() { return cPRINTKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtsStatementParserRuleCall_3_0 = (RuleCall)cStmtsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cELSEKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseStmtsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseStmtsStatementParserRuleCall_4_1_0 = (RuleCall)cElseStmtsAssignment_4_1.eContents().get(0);
		private final Keyword cENDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfStmt:
		//	'IF' expr=Expr 'THEN' stmts+=Statement* ('ELSE' elseStmts+=Statement*)? 'END';
		@Override public ParserRule getRule() { return rule; }
		
		//'IF' expr=Expr 'THEN' stmts+=Statement* ('ELSE' elseStmts+=Statement*)? 'END'
		public Group getGroup() { return cGroup; }
		
		//'IF'
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//stmts+=Statement*
		public Assignment getStmtsAssignment_3() { return cStmtsAssignment_3; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_3_0() { return cStmtsStatementParserRuleCall_3_0; }
		
		//('ELSE' elseStmts+=Statement*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ELSE'
		public Keyword getELSEKeyword_4_0() { return cELSEKeyword_4_0; }
		
		//elseStmts+=Statement*
		public Assignment getElseStmtsAssignment_4_1() { return cElseStmtsAssignment_4_1; }
		
		//Statement
		public RuleCall getElseStmtsStatementParserRuleCall_4_1_0() { return cElseStmtsStatementParserRuleCall_4_1_0; }
		
		//'END'
		public Keyword getENDKeyword_5() { return cENDKeyword_5; }
	}
	public class WhileStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.WhileStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHILEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cDOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtsStatementParserRuleCall_3_0 = (RuleCall)cStmtsAssignment_3.eContents().get(0);
		private final Keyword cENDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileStmt:
		//	'WHILE' expr=Expr 'DO' stmts+=Statement* 'END';
		@Override public ParserRule getRule() { return rule; }
		
		//'WHILE' expr=Expr 'DO' stmts+=Statement* 'END'
		public Group getGroup() { return cGroup; }
		
		//'WHILE'
		public Keyword getWHILEKeyword_0() { return cWHILEKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
		
		//'DO'
		public Keyword getDOKeyword_2() { return cDOKeyword_2; }
		
		//stmts+=Statement*
		public Assignment getStmtsAssignment_3() { return cStmtsAssignment_3; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_3_0() { return cStmtsStatementParserRuleCall_3_0; }
		
		//'END'
		public Keyword getENDKeyword_4() { return cENDKeyword_4; }
	}
	public class MoveStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.MoveStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMOVEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarDeclarationCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cVarDeclarationCrossReference_1_0.eContents().get(1);
		
		//MoveStmt:
		//	'MOVE' var=[Declaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'MOVE' var=[Declaration]
		public Group getGroup() { return cGroup; }
		
		//'MOVE'
		public Keyword getMOVEKeyword_0() { return cMOVEKeyword_0; }
		
		//var=[Declaration]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//[Declaration]
		public CrossReference getVarDeclarationCrossReference_1_0() { return cVarDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getVarDeclarationIDTerminalRuleCall_1_0_1() { return cVarDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Expr");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expr:
		//	And ({Or.left=current} "OR" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "OR" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "OR" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathExistenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPathExistenceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expr:
		//	PathExistence ({And.left=current} "AND" right=PathExistence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PathExistence ({And.left=current} "AND" right=PathExistence)*
		public Group getGroup() { return cGroup; }
		
		//PathExistence
		public RuleCall getPathExistenceParserRuleCall_0() { return cPathExistenceParserRuleCall_0; }
		
		//({And.left=current} "AND" right=PathExistence)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=PathExistence
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PathExistence
		public RuleCall getRightPathExistenceParserRuleCall_1_2_0() { return cRightPathExistenceParserRuleCall_1_2_0; }
	}
	public class PathExistenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.PathExistence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPathExistenceLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PathExistence Expr:
		//	Comparison ({PathExistence.left=current} '->-' right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({PathExistence.left=current} '->-' right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({PathExistence.left=current} '->-' right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PathExistence.left=current}
		public Action getPathExistenceLeftAction_1_0() { return cPathExistenceLeftAction_1_0; }
		
		//'->-'
		public Keyword getHyphenMinusGreaterThanSignHyphenMinusKeyword_1_1() { return cHyphenMinusGreaterThanSignHyphenMinusKeyword_1_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpEqualsSignKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_5 = (Keyword)cOpAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expr:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<" | "=" | "!=") right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<" | "=" | "!=") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<" | "=" | "!=") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<" | "=" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<" | "=" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//"="
		public Keyword getOpEqualsSignKeyword_1_1_0_4() { return cOpEqualsSignKeyword_1_1_0_4; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_5() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_5; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusOrMinLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMulOrDivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PlusOrMinus Expr:
		//	MulOrDiv ({PlusOrMin.left=current} op=('+' | '-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv ({PlusOrMin.left=current} op=('+' | '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//({PlusOrMin.left=current} op=('+' | '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PlusOrMin.left=current}
		public Action getPlusOrMinLeftAction_1_0() { return cPlusOrMinLeftAction_1_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_2_0() { return cRightMulOrDivParserRuleCall_1_2_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expr:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprPrimaryParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final RuleCall cParticleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAtomicParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary Expr:
		//	'(' Expr ')' | {Not} "!" Expr=Primary | Particle | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expr ')' | {Not} "!" Expr=Primary | Particle | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expr ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_0_1() { return cExprParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} "!" Expr=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//Expr=Primary
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }
		
		//Primary
		public RuleCall getExprPrimaryParserRuleCall_1_2_0() { return cExprPrimaryParserRuleCall_1_2_0; }
		
		//Particle
		public RuleCall getParticleParserRuleCall_2() { return cParticleParserRuleCall_2; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_3() { return cAtomicParserRuleCall_3; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cVariableRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVariableDeclarationCrossReference_3_1_0 = (CrossReference)cVariableAssignment_3_1.eContents().get(0);
		private final RuleCall cVariableDeclarationIDTerminalRuleCall_3_1_0_1 = (RuleCall)cVariableDeclarationCrossReference_3_1_0.eContents().get(1);
		private final RuleCall cGraphParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Atomic Expr:
		//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {VariableRef}
		//	variable=[Declaration] | Graph;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {VariableRef}
		//variable=[Declaration] | Graph
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{VariableRef} variable=[Declaration]
		public Group getGroup_3() { return cGroup_3; }
		
		//{VariableRef}
		public Action getVariableRefAction_3_0() { return cVariableRefAction_3_0; }
		
		//variable=[Declaration]
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }
		
		//[Declaration]
		public CrossReference getVariableDeclarationCrossReference_3_1_0() { return cVariableDeclarationCrossReference_3_1_0; }
		
		//ID
		public RuleCall getVariableDeclarationIDTerminalRuleCall_3_1_0_1() { return cVariableDeclarationIDTerminalRuleCall_3_1_0_1; }
		
		//Graph
		public RuleCall getGraphParserRuleCall_4() { return cGraphParserRuleCall_4; }
	}
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGraphConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGRAPHKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVerticesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVerticesVertexParserRuleCall_4_0 = (RuleCall)cVerticesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEdgesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEdgesEdgeParserRuleCall_8_0 = (RuleCall)cEdgesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Graph Expr:
		//	{GraphConstant} 'GRAPH' '{' '{' vertices+=Vertex* '}' ',' '{' edges+=Edge* '}' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GraphConstant} 'GRAPH' '{' '{' vertices+=Vertex* '}' ',' '{' edges+=Edge* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//{GraphConstant}
		public Action getGraphConstantAction_0() { return cGraphConstantAction_0; }
		
		//'GRAPH'
		public Keyword getGRAPHKeyword_1() { return cGRAPHKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//vertices+=Vertex*
		public Assignment getVerticesAssignment_4() { return cVerticesAssignment_4; }
		
		//Vertex
		public RuleCall getVerticesVertexParserRuleCall_4_0() { return cVerticesVertexParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//edges+=Edge*
		public Assignment getEdgesAssignment_8() { return cEdgesAssignment_8; }
		
		//Edge
		public RuleCall getEdgesEdgeParserRuleCall_8_0() { return cEdgesEdgeParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ParticleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Particle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParticleConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPARTICLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGraphAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGraphExprParserRuleCall_3_0 = (RuleCall)cGraphAssignment_3.eContents().get(0);
		private final Keyword cATKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVertexAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cVertexVertexCrossReference_5_0 = (CrossReference)cVertexAssignment_5.eContents().get(0);
		private final RuleCall cVertexVertexIDTerminalRuleCall_5_0_1 = (RuleCall)cVertexVertexCrossReference_5_0.eContents().get(1);
		
		//Particle Expr:
		//	{ParticleConstant} 'PARTICLE' 'ON' graph=Expr 'AT' vertex=[Vertex];
		@Override public ParserRule getRule() { return rule; }
		
		//{ParticleConstant} 'PARTICLE' 'ON' graph=Expr 'AT' vertex=[Vertex]
		public Group getGroup() { return cGroup; }
		
		//{ParticleConstant}
		public Action getParticleConstantAction_0() { return cParticleConstantAction_0; }
		
		//'PARTICLE'
		public Keyword getPARTICLEKeyword_1() { return cPARTICLEKeyword_1; }
		
		//'ON'
		public Keyword getONKeyword_2() { return cONKeyword_2; }
		
		//graph=Expr
		public Assignment getGraphAssignment_3() { return cGraphAssignment_3; }
		
		//Expr
		public RuleCall getGraphExprParserRuleCall_3_0() { return cGraphExprParserRuleCall_3_0; }
		
		//'AT'
		public Keyword getATKeyword_4() { return cATKeyword_4; }
		
		//vertex=[Vertex]
		public Assignment getVertexAssignment_5() { return cVertexAssignment_5; }
		
		//[Vertex]
		public CrossReference getVertexVertexCrossReference_5_0() { return cVertexVertexCrossReference_5_0; }
		
		//ID
		public RuleCall getVertexVertexIDTerminalRuleCall_5_0_1() { return cVertexVertexIDTerminalRuleCall_5_0_1; }
	}
	public class VertexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Vertex");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Vertex:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class EdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.peweb.graph.Graph.Edge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceVertexCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceVertexIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceVertexCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDestVertexCrossReference_2_0 = (CrossReference)cDestAssignment_2.eContents().get(0);
		private final RuleCall cDestVertexIDTerminalRuleCall_2_0_1 = (RuleCall)cDestVertexCrossReference_2_0.eContents().get(1);
		
		//Edge:
		//	source=[Vertex] '->' dest=[Vertex];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[Vertex] '->' dest=[Vertex]
		public Group getGroup() { return cGroup; }
		
		//source=[Vertex]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[Vertex]
		public CrossReference getSourceVertexCrossReference_0_0() { return cSourceVertexCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceVertexIDTerminalRuleCall_0_0_1() { return cSourceVertexIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//dest=[Vertex]
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }
		
		//[Vertex]
		public CrossReference getDestVertexCrossReference_2_0() { return cDestVertexCrossReference_2_0; }
		
		//ID
		public RuleCall getDestVertexIDTerminalRuleCall_2_0_1() { return cDestVertexIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final DeclarationElements pDeclaration;
	private final StatementElements pStatement;
	private final AssignStmtElements pAssignStmt;
	private final PrintStmtElements pPrintStmt;
	private final IfStmtElements pIfStmt;
	private final WhileStmtElements pWhileStmt;
	private final MoveStmtElements pMoveStmt;
	private final ExprElements pExpr;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final PathExistenceElements pPathExistence;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final GraphElements pGraph;
	private final ParticleElements pParticle;
	private final VertexElements pVertex;
	private final EdgeElements pEdge;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GraphGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pDeclaration = new DeclarationElements();
		this.pStatement = new StatementElements();
		this.pAssignStmt = new AssignStmtElements();
		this.pPrintStmt = new PrintStmtElements();
		this.pIfStmt = new IfStmtElements();
		this.pWhileStmt = new WhileStmtElements();
		this.pMoveStmt = new MoveStmtElements();
		this.pExpr = new ExprElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pPathExistence = new PathExistenceElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pGraph = new GraphElements();
		this.pParticle = new ParticleElements();
		this.pVertex = new VertexElements();
		this.pEdge = new EdgeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ox.xtext.peweb.graph.Graph".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program} declarations+=Declaration* 'BEGIN' stmts+=Statement* 'END';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Declaration:
	//	'VAR' name=ID ':' type=('String' | 'Integer' | 'Boolean' | 'Graph' | 'Particle');
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Statement:
	//	(AssignStmt | PrintStmt | IfStmt | WhileStmt | MoveStmt) ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//AssignStmt:
	//	var=[Declaration] ':=' expr=Expr;
	public AssignStmtElements getAssignStmtAccess() {
		return pAssignStmt;
	}
	
	public ParserRule getAssignStmtRule() {
		return getAssignStmtAccess().getRule();
	}
	
	//PrintStmt:
	//	'PRINT' expr=Expr;
	public PrintStmtElements getPrintStmtAccess() {
		return pPrintStmt;
	}
	
	public ParserRule getPrintStmtRule() {
		return getPrintStmtAccess().getRule();
	}
	
	//IfStmt:
	//	'IF' expr=Expr 'THEN' stmts+=Statement* ('ELSE' elseStmts+=Statement*)? 'END';
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//WhileStmt:
	//	'WHILE' expr=Expr 'DO' stmts+=Statement* 'END';
	public WhileStmtElements getWhileStmtAccess() {
		return pWhileStmt;
	}
	
	public ParserRule getWhileStmtRule() {
		return getWhileStmtAccess().getRule();
	}
	
	//MoveStmt:
	//	'MOVE' var=[Declaration];
	public MoveStmtElements getMoveStmtAccess() {
		return pMoveStmt;
	}
	
	public ParserRule getMoveStmtRule() {
		return getMoveStmtAccess().getRule();
	}
	
	//Expr:
	//	Or;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//Or Expr:
	//	And ({Or.left=current} "OR" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expr:
	//	PathExistence ({And.left=current} "AND" right=PathExistence)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//PathExistence Expr:
	//	Comparison ({PathExistence.left=current} '->-' right=Comparison)*;
	public PathExistenceElements getPathExistenceAccess() {
		return pPathExistence;
	}
	
	public ParserRule getPathExistenceRule() {
		return getPathExistenceAccess().getRule();
	}
	
	//Comparison Expr:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<" | "=" | "!=") right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expr:
	//	MulOrDiv ({PlusOrMin.left=current} op=('+' | '-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expr:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expr:
	//	'(' Expr ')' | {Not} "!" Expr=Primary | Particle | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expr:
	//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {VariableRef}
	//	variable=[Declaration] | Graph;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Graph Expr:
	//	{GraphConstant} 'GRAPH' '{' '{' vertices+=Vertex* '}' ',' '{' edges+=Edge* '}' '}';
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//Particle Expr:
	//	{ParticleConstant} 'PARTICLE' 'ON' graph=Expr 'AT' vertex=[Vertex];
	public ParticleElements getParticleAccess() {
		return pParticle;
	}
	
	public ParserRule getParticleRule() {
		return getParticleAccess().getRule();
	}
	
	//Vertex:
	//	name=ID;
	public VertexElements getVertexAccess() {
		return pVertex;
	}
	
	public ParserRule getVertexRule() {
		return getVertexAccess().getRule();
	}
	
	//Edge:
	//	source=[Vertex] '->' dest=[Vertex];
	public EdgeElements getEdgeAccess() {
		return pEdge;
	}
	
	public ParserRule getEdgeRule() {
		return getEdgeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
