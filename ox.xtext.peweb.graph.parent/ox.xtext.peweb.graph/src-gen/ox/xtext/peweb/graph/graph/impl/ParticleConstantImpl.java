/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package ox.xtext.peweb.graph.graph.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import ox.xtext.peweb.graph.graph.Expr;
import ox.xtext.peweb.graph.graph.GraphPackage;
import ox.xtext.peweb.graph.graph.ParticleConstant;
import ox.xtext.peweb.graph.graph.Vertex;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Particle Constant</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ox.xtext.peweb.graph.graph.impl.ParticleConstantImpl#getGraph <em>Graph</em>}</li>
 *   <li>{@link ox.xtext.peweb.graph.graph.impl.ParticleConstantImpl#getVertex <em>Vertex</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParticleConstantImpl extends ExprImpl implements ParticleConstant
{
  /**
   * The cached value of the '{@link #getGraph() <em>Graph</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGraph()
   * @generated
   * @ordered
   */
  protected Expr graph;

  /**
   * The cached value of the '{@link #getVertex() <em>Vertex</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVertex()
   * @generated
   * @ordered
   */
  protected Vertex vertex;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParticleConstantImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GraphPackage.Literals.PARTICLE_CONSTANT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getGraph()
  {
    return graph;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGraph(Expr newGraph, NotificationChain msgs)
  {
    Expr oldGraph = graph;
    graph = newGraph;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GraphPackage.PARTICLE_CONSTANT__GRAPH, oldGraph, newGraph);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGraph(Expr newGraph)
  {
    if (newGraph != graph)
    {
      NotificationChain msgs = null;
      if (graph != null)
        msgs = ((InternalEObject)graph).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GraphPackage.PARTICLE_CONSTANT__GRAPH, null, msgs);
      if (newGraph != null)
        msgs = ((InternalEObject)newGraph).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GraphPackage.PARTICLE_CONSTANT__GRAPH, null, msgs);
      msgs = basicSetGraph(newGraph, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphPackage.PARTICLE_CONSTANT__GRAPH, newGraph, newGraph));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Vertex getVertex()
  {
    if (vertex != null && vertex.eIsProxy())
    {
      InternalEObject oldVertex = (InternalEObject)vertex;
      vertex = (Vertex)eResolveProxy(oldVertex);
      if (vertex != oldVertex)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GraphPackage.PARTICLE_CONSTANT__VERTEX, oldVertex, vertex));
      }
    }
    return vertex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Vertex basicGetVertex()
  {
    return vertex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVertex(Vertex newVertex)
  {
    Vertex oldVertex = vertex;
    vertex = newVertex;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphPackage.PARTICLE_CONSTANT__VERTEX, oldVertex, vertex));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GraphPackage.PARTICLE_CONSTANT__GRAPH:
        return basicSetGraph(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GraphPackage.PARTICLE_CONSTANT__GRAPH:
        return getGraph();
      case GraphPackage.PARTICLE_CONSTANT__VERTEX:
        if (resolve) return getVertex();
        return basicGetVertex();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GraphPackage.PARTICLE_CONSTANT__GRAPH:
        setGraph((Expr)newValue);
        return;
      case GraphPackage.PARTICLE_CONSTANT__VERTEX:
        setVertex((Vertex)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GraphPackage.PARTICLE_CONSTANT__GRAPH:
        setGraph((Expr)null);
        return;
      case GraphPackage.PARTICLE_CONSTANT__VERTEX:
        setVertex((Vertex)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GraphPackage.PARTICLE_CONSTANT__GRAPH:
        return graph != null;
      case GraphPackage.PARTICLE_CONSTANT__VERTEX:
        return vertex != null;
    }
    return super.eIsSet(featureID);
  }

} //ParticleConstantImpl
